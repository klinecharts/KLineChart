import{C as t}from"./theme.GgFhAdag.js";import{b as a,o as n,k as e}from"./framework.DaiwiRog.js";const c=JSON.parse(`{"js":"import { init, registerIndicator } from 'klinecharts'\\n\\nregisterIndicator({\\n  name: 'customIndicatorTooltip',\\n  shortName: 'Tooltip',\\n  series: 'price',\\n  figures: [{\\n    key: 'close',\\n    title: 'close: ',\\n    type: 'line'\\n  }],\\n  calc: dataList => dataList.reduce((prev, data) => {\\n    prev[data.timestamp] = { close: data.close }\\n    return prev\\n  }, {}),\\n  createTooltipDataSource: ({ indicator, crosshair }) => {\\n    const result = indicator.result\\n    const data = result[crosshair.kLineData.timestamp]\\n    if (data) {\\n      return {\\n        legends: [\\n          { title: 'CLOSE: ', value: data.close },\\n          { title: 'random: ', value: Math.round(Math.random() * 10) }\\n        ]\\n      }\\n    }\\n    return {}\\n  }\\n})\\n\\nconst chart = init('custom-indicator-tooltip-chart')\\n\\nchart.createIndicator('customIndicatorTooltip')\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),m={__name:"index",setup(r){return(o,i)=>(n(),a(t,{title:"custom-indicator-tooltip",chartId:"custom-indicator-tooltip-chart",code:e(c).js},null,8,["code"]))}},s=JSON.parse(`{"js":"import { init, registerIndicator, getFigureClass } from 'klinecharts'\\n\\nregisterIndicator({\\n  name: 'customIndicatorDraw',\\n  shortName: 'Volume',\\n  zLevel: -1,\\n  figures: [],\\n  calc: dataList => dataList.reduce((prev, data) => {\\n    prev[data.timestamp] = { volume: data.volume, close: data.close, open: data.open }\\n    return prev\\n  }, {}),\\n  createTooltipDataSource: ({ indicator, crosshair }) => {\\n    const result = indicator.result\\n    const data = result[crosshair.kLineData.timestamp]\\n    if (data) {\\n      const color = data.open < data.close ? 'rgb(224, 152, 199)' : 'rgb(143, 211, 232)'\\n      return {\\n        legends: [\\n          { title: '', value: { text: data.volume, color } }\\n        ]\\n      }\\n    }\\n    return {}\\n  },\\n  draw: ({ ctx, chart, indicator, bounding, xAxis }) => {\\n    const { realFrom, realTo } = chart.getVisibleRange()\\n    const { gapBar, halfGapBar } = chart.getBarSpace()\\n    const dataList = chart.getDataList()\\n    const { result } = indicator\\n    let maxVolume = 0\\n    for (let i = realFrom; i < realTo; i++) {\\n      const kLineData = dataList[i]\\n      if (kLineData) {\\n        const data = result[kLineData.timestamp]\\n        if (data) {\\n          maxVolume = Math.max(maxVolume, data.volume)\\n        }\\n      }\\n    }\\n    const totalHeight = bounding.height * 0.4\\n    const Rect = getFigureClass('rect')\\n    for (let i = realFrom; i < realTo; i++) {\\n      const kLineData = dataList[i]\\n      if (kLineData) {\\n        const data = result[kLineData.timestamp]\\n        if (data) {\\n          const height = Math.round(data.volume / maxVolume * totalHeight)\\n          const color = data.open < data.close ? 'rgba(224, 152, 199, 0.6)' : 'rgba(143, 211, 232, 0.6)'\\n          new Rect({\\n            name: 'rect',\\n            attrs: {\\n              x: xAxis.convertToPixel(i) - halfGapBar,\\n              y: bounding.height - height,\\n              width: gapBar,\\n              height\\n            },\\n            styles: { color }\\n          }).draw(ctx)\\n        }\\n      }\\n    }\\n    return true\\n  }\\n})\\n\\nconst chart = init('custom-indicator-draw-chart')\\n\\nchart.createIndicator('customIndicatorDraw', false, { id: 'candle_pane' })\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),u={__name:"index",setup(r){return(o,i)=>(n(),a(t,{title:"custom-indicator-draw",chartId:"custom-indicator-draw-chart",code:e(s).js},null,8,["code"]))}};export{m as _,u as a};
