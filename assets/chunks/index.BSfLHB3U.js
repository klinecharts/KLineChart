import{C as n}from"./theme.HpYxlt3r.js";import{b as t,o as a,k as e}from"./framework.D7QdUWJa.js";const i=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init('init-basic-chart')\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),S={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-basic",chartId:"init-basic-chart",code:e(i).js},null,8,["code"]))}},o=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init('init-layout-chart', {\\n  layout: [\\n    {\\n      type: 'candle',\\n      content: ['MA', { name: 'EMA', calcParams: [10, 30] }],\\n      options: { order: Number.MIN_SAFE_INTEGER }\\n    },\\n    { type: 'indicator', content: ['VOL'], options: { order: 10 } },\\n    { type: 'xAxis', options: { order: 9 } }\\n  ]\\n})\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),$={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-layout",chartId:"init-layout-chart",code:e(o).js},null,8,["code"]))}},l=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init(\\n  'init-locale-built-in-chart',\\n  { locale: 'zh-CN' }\\n)\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),L={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-locale-built-in",chartId:"init-locale-built-in-chart",code:e(l).js},null,8,["code"]))}},d=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init(\\n  'init-timezone-chart',\\n  { timezone: 'Europe/Berlin' }\\n)\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),x={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-timezone",chartId:"init-timezone-chart",code:e(d).js},null,8,["code"]))}},h=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init(\\n  'init-styles-built-in-chart',\\n  { styles: 'light' }\\n)\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),g={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-styles-built-in",chartId:"init-styles-built-in-chart",code:e(h).js},null,8,["code"]))}},m=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init(\\n  'init-styles-override-chart',\\n  {\\n    styles: {\\n      candle: {\\n        bar: {\\n          upColor: '#8fd3e8',\\n          upBorderColor: '#8fd3e8',\\n          upWickColor: '#8fd3e8',\\n          downColor: '#edafda',\\n          downBorderColor: '#edafda',\\n          downWickColor: '#edafda'\\n        }\\n      }\\n    }\\n  }\\n)\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),D={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-styles-override",chartId:"init-styles-override-chart",code:e(m).js},null,8,["code"]))}},p=JSON.parse(`{"js":"import { init, utils } from 'klinecharts'\\n\\nconst chart = init(\\n  'init-formatDate-chart',\\n  {\\n    formatter: {\\n      formatDate: ({\\n        dateTimeFormat,\\n        timestamp,\\n        type\\n      }) => {\\n        switch (type) {\\n          case 'tooltip': {\\n            return utils.formatDate(dateTimeFormat, timestamp, 'YYYY-MM-DD HH:mm')\\n          }\\n          case 'crosshair': {\\n            return utils.formatDate(dateTimeFormat, timestamp, 'YYYY-MM-DD')\\n          }\\n          case 'xAxis': {\\n            return utils.formatDate(dateTimeFormat, timestamp, 'MM-DD')\\n          }\\n        }\\n        return utils.formatDate(dateTimeFormat, timestamp, 'MM-DD HH:mm')\\n      }\\n    }\\n  }\\n)\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),v={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-formatDate",chartId:"init-formatDate-chart",code:e(p).js},null,8,["code"]))}},u=JSON.parse("{\"js\":\"import { init } from 'klinecharts'\\n\\nconst chart = init(\\n  'init-formatBigNumber-chart',\\n  {\\n    formatter: {\\n      formatBigNumber: value => {\\n        const v = +value\\n        if (typeof v === 'number') {\\n          if (v > 10000) {\\n            return `${+((v / 10000).toFixed(3))}万`\\n          }\\n        }\\n        return `${value}`\\n      }\\n    }\\n  }\\n)\\nchart.createIndicator('VOL')\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n\"}"),N={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-formatBigNumber",chartId:"init-formatBigNumber-chart",code:e(u).js},null,8,["code"]))}},_=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init(\\n  'init-thousandsSeparator-none-chart',\\n  { thousandsSeparator: { sign: '' } }\\n)\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),B={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-thousandsSeparator-none",chartId:"init-thousandsSeparator-none-chart",code:e(_).js},null,8,["code"]))}},k=JSON.parse("{\"js\":\"import { init } from 'klinecharts'\\n\\nconst chart = init(\\n  'init-thousandsSeparator-format-chart',\\n  {\\n    thousandsSeparator: {\\n      format: value => {\\n        const sign = '.'\\n        const v = `${value}`\\n        if (v.includes('.')) {\\n          const arr = v.split('.')\\n          return `${arr[0].replace(/(\\\\d)(?=(\\\\d{3})+$)/g, $1 => `${$1}${sign}`)},${arr[1]}`\\n        }\\n        return v.replace(/(\\\\d)(?=(\\\\d{3})+$)/g, $1 => `${$1}${sign}`)\\n      }\\n    }\\n  }\\n)\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n\"}"),I={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-thousandsSeparator-format",chartId:"init-thousandsSeparator-format-chart",code:e(k).js},null,8,["code"]))}},f=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init(\\n  'init-decimalFold-none-chart',\\n  { decimalFold: { threshold: 1000 } }\\n)\\n\\nchart.setSymbol({ ticker: 'TestSymbol', pricePrecision: 10 })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline2.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n"}`),T={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-decimalFold-none",chartId:"init-decimalFold-none-chart",code:e(f).js},null,8,["code"]))}},b=JSON.parse("{\"js\":\"import { init } from 'klinecharts'\\n\\nconst subscriptNumbers = {\\n  0: '₀',\\n  1: '₁',\\n  2: '₂',\\n  3: '₃',\\n  4: '₄',\\n  5: '₅',\\n  6: '₆',\\n  7: '₇',\\n  8: '₈',\\n  9: '₉'\\n}\\n\\nconst chart = init(\\n  'init-decimalFold-format-chart',\\n  {\\n    decimalFold: {\\n      format: value => {\\n        const vl = `${value}`\\n        const reg = /\\\\.0{3,}[1-9][0-9]*$/\\n        if (reg.test(vl)) {\\n          const result = vl.split('.')\\n          const lastIndex = result.length - 1\\n          const v = result[lastIndex]\\n          const match = /0*/.exec(v)\\n          if (match) {\\n            const count = `${match[0].length}`\\n            result[lastIndex] = v.replace(/0*/, `0${count.replace(/\\\\d/, $1 => subscriptNumbers[$1] ?? '')}`)\\n            return result.join('.')\\n          }\\n        }\\n        return vl\\n      }\\n    }\\n  }\\n)\\n\\nchart.setSymbol({ ticker: 'TestSymbol', pricePrecision: 10 })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline2.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n\"}"),P={__name:"index",setup(r){return(s,c)=>(a(),t(n,{title:"init-decimalFold-format",chartId:"init-decimalFold-format-chart",code:e(b).js},null,8,["code"]))}};export{S as _,$ as a,L as b,x as c,g as d,D as e,v as f,N as g,B as h,I as i,T as j,P as k};
