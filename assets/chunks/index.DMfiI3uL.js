import{C as t}from"./theme.LLWvAvjg.js";import{b as a,o as n,k as e}from"./framework.5fYc0k1z.js";const i=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init('createOverlay-basic-chart')\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n      })\\n  }\\n})\\n\\nchart.createOverlay('segment')\\n"}`),m={__name:"index",setup(s){return(r,c)=>(n(),a(t,{title:"createOverlay-basic",chartId:"createOverlay-basic-chart",code:e(i).js},null,8,["code"]))}},o=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init('createOverlay-points-chart')\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n        const startData = dataList[dataList.length - 50]\\n        const endData = dataList[dataList.length - 10]\\n        chart.createOverlay({\\n          name: 'segment',\\n          paneId: 'candle_pane',\\n          points: [\\n            { timestamp: startData.timestamp, value: startData.high },\\n            { timestamp: endData.timestamp, value: endData.low }\\n          ]\\n        })\\n      })\\n  }\\n})\\n"}`),p={__name:"index",setup(s){return(r,c)=>(n(),a(t,{title:"createOverlay-points",chartId:"createOverlay-points-chart",code:e(o).js},null,8,["code"]))}},l=JSON.parse(`{"js":"import { init } from 'klinecharts'\\n\\nconst chart = init('createOverlay-batch-chart')\\n\\nchart.setSymbol({ ticker: 'TestSymbol' })\\nchart.setPeriod({ span: 1, type: 'day' })\\nchart.setDataLoader({\\n  getBars: ({\\n    callback\\n  }) => {\\n    fetch('https://klinecharts.com/datas/kline.json')\\n      .then(res => res.json())\\n      .then(dataList => {\\n        callback(dataList)\\n        const startData = dataList[dataList.length - 50]\\n        const endData = dataList[dataList.length - 10]\\n        chart.createOverlay([\\n          {\\n            name: 'segment',\\n            paneId: 'candle_pane',\\n            points: [\\n              { timestamp: startData.timestamp, value: startData.high },\\n              { timestamp: endData.timestamp, value: endData.low }\\n            ]\\n          },\\n          {\\n            name: 'priceLine',\\n            paneId: 'candle_pane',\\n            points: [\\n              { timestamp: startData.timestamp, value: startData.close }\\n            ]\\n          }\\n        ])\\n      })\\n  }\\n})\\n"}`),_={__name:"index",setup(s){return(r,c)=>(n(),a(t,{title:"createOverlay-batch",chartId:"createOverlay-batch-chart",code:e(l).js},null,8,["code"]))}};export{m as _,p as a,_ as b};
