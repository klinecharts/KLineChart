import{_ as i}from"./chunks/index.D63eOazq.js";import{c as a,o as e,ac as n,J as l}from"./chunks/framework.5fYc0k1z.js";import"./chunks/theme.LLWvAvjg.js";const E=JSON.parse('{"title":"convertToPixel(value, finder?)","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/instance/convertToPixel.md","filePath":"api/instance/convertToPixel.md","lastUpdated":1732905115000}'),t={name:"api/instance/convertToPixel.md"},c=Object.assign(t,{setup(h){return(p,s)=>(e(),a("div",null,[s[0]||(s[0]=n(`<h1 id="converttopixel-value-finder" tabindex="-1">convertToPixel(value, finder?) <a class="header-anchor" href="#converttopixel-value-finder" aria-label="Permalink to “convertToPixel(value, finder?)”">​</a></h1><p><code>convertToPixel</code> 将值转换成坐标。</p><h2 id="reference" tabindex="-1">参考 <a class="header-anchor" href="#reference" aria-label="Permalink to “参考”">​</a></h2><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  value: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dataIndex?: number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timestamp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    dataIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    timestamp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  finder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    paneId?: string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    absolute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ x?: number, y?: number }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="parameters" tabindex="-1">参数 <a class="header-anchor" href="#parameters" aria-label="Permalink to “参数”">​</a></h3><ul><li><code>value</code> 需要转换的值，可以是当个对象，也可以是数组。 <ul><li><code>dataIndex</code> 数据索引，如果 <code>dataIndex</code> 和 <code>timestamp</code> 同时存在，则依据索引转换。</li><li><code>timestamp</code> 时间戳。</li><li><code>value</code> 对应y轴的值。</li></ul></li><li><code>finder</code> 过滤条件。 <ul><li><code>paneId</code> 窗口id。</li><li><code>absolute</code> 是否是绝对坐标，只作用于y轴。</li></ul></li></ul><h3 id="returns" tabindex="-1">返回值 <a class="header-anchor" href="#returns" aria-label="Permalink to “返回值”">​</a></h3><p><code>convertToPixel</code> 返回 <code>{ x?: number, y?: number }</code> 或者 <code>Array&lt;{ x?: number, y?: number }&gt;</code> 。</p><h2 id="usage" tabindex="-1">用法 <a class="header-anchor" href="#usage" aria-label="Permalink to “用法”">​</a></h2><h3 id="basic" tabindex="-1">基本用法 <a class="header-anchor" href="#basic" aria-label="Permalink to “基本用法”">​</a></h3>`,10)),l(i)]))}});export{E as __pageData,c as default};
