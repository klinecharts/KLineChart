import{P as l,a as o}from"./chunks/ProjectModuleExplain.Bhd0INTl.js";import{c as r,o as c,ac as a,J as d,j as i,a as t}from"./chunks/framework.5fYc0k1z.js";const u=JSON.parse('{"title":"本地开发","description":"","frontmatter":{},"headers":[],"relativePath":"guide/local-development.md","filePath":"guide/local-development.md","lastUpdated":1747419494000}'),n={name:"guide/local-development.md"},b=Object.assign(n,{setup(s){return(h,e)=>(c(),r("div",null,[e[0]||(e[0]=a('<h1 id="本地开发" tabindex="-1">本地开发 <a class="header-anchor" href="#本地开发" aria-label="Permalink to “本地开发”">​</a></h1><h2 id="摘要" tabindex="-1">摘要 <a class="header-anchor" href="#摘要" aria-label="Permalink to “摘要”">​</a></h2><p>如果你看到此处，你可能会对改进 KLineChart 核心感兴趣。感谢 <a href="https://github.com/fish2016" target="_blank" rel="noreferrer">@fish2016</a> 编写的此文档。</p><h2 id="须知" tabindex="-1">须知 <a class="header-anchor" href="#须知" aria-label="Permalink to “须知”">​</a></h2><h3 id="文件目录说明" tabindex="-1">文件目录说明 <a class="header-anchor" href="#文件目录说明" aria-label="Permalink to “文件目录说明”">​</a></h3>',5)),d(l),e[1]||(e[1]=i("h3",{id:"模块依赖关系",tabindex:"-1"},[t("模块依赖关系 "),i("a",{class:"header-anchor",href:"#模块依赖关系","aria-label":"Permalink to “模块依赖关系”"},"​")],-1)),d(o),e[2]||(e[2]=a(`<p>上图是按照下层作为上层的容器，从上到下列出图表模块层级。</p><ul><li><code>Figure</code> 基本图形，如圆(circle)，多边形(polygon)，矩形(rect)，文本(text)等。</li><li><code>View</code> 从 <code>ChartStore</code> 中获取数据，进行单一业务绘制，如k线柱，面积图，网格线，十字光标线，指标等等。</li><li><code>Widget</code> 创建canvas，将相关的 <code>View</code> 进行组装到一起。</li><li><code>Pane</code> 创建dom容器，将<code>Widget</code>组装到一起。</li><li><code>Chart</code> 对Pane进行管理，例如删除和添加操作，形成最终的图表。此外，还进行事件分发，对<code>ChartStore</code>里面的数据进行操作，根据需要通知下级组件进行更新。</li></ul><h2 id="开发" tabindex="-1">开发 <a class="header-anchor" href="#开发" aria-label="Permalink to “开发”">​</a></h2><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to “安装依赖”">​</a></h3><p>项目强制使用 <a href="https://pnpm.io/zh/" target="_blank" rel="noreferrer">pnpm</a> 来作为包管理器，所以需要使用 pnpm 安装依赖。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 项目根目录下执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h3 id="执行命令说明" tabindex="-1">执行命令说明 <a class="header-anchor" href="#执行命令说明" aria-label="Permalink to “执行命令说明”">​</a></h3><ul><li><code>code-lint</code>：运行 <code>pnpm run code-lint</code> 检验代码规则。</li><li><code>clean</code>：运行 <code>pnpm run clean</code> 进行清理打包好的文件。</li><li><code>build-esm</code>：运行 <code>pnpm run build-esm</code> 打包成 esm 模块。</li><li><code>build-cjs</code>：运行 <code>pnpm run build-cjs</code> 打包成 commonjs 模块。</li><li><code>build-umd:dev</code>：运行 <code>pnpm run build-umd:dev</code> 打包成 umd 开发环境模块。</li><li><code>build-umd:prod</code>：运行 <code>pnpm run build-umd:dev</code> 打包成 umd 生产环境模块。</li><li><code>build-umd</code>：运行 <code>pnpm run build-umd</code> 同时打包 umd 开发环境和生产环境模块。</li><li><code>build-core</code>：运行 <code>pnpm run build-core</code> 同时打包 esm 模块，commonjs 模块，umd 开发环境和生产环境模块。</li><li><code>build-dts</code>：运行 <code>pnpm run build-dts</code> 生成 typescript 依赖文件。</li><li><code>build</code>：运行 <code>pnpm run build</code> 同时打包 esm 模块，commonjs 模块，umd 开发环境和生产环境模块并生成 typescript 依赖文件。</li></ul><h3 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to “调试”">​</a></h3><p>此项目没有调试项目，需要创建新的工程，用 <code>npm link</code> 引入，或者直接引入 <code>index.ts</code> 入口文件的方式进行调试。你可以使用 <a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">vite</a> 进行项目创建。</p>`,10))]))}});export{u as __pageData,b as default};
